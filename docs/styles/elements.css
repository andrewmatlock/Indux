/**
 * Indux Elements CSS
 * Minimalist CSS that integrates HTML elements into your global design system.
 * Includes utility classes for common patterns.
 * Uses CSS custom properties defined in styles.css for consistent theming.
 * 
 * https://github.com/andrewindux/indux/styles/elements.css
 * 
 * @license MIT
 * @version 1.0.0
 * @author Andrew Matlock
 */

/* Anchor links */

.frame :where(a:not([role=button]), button.link) {
    text-decoration: underline;
    text-underline-offset: 2px;
    cursor: pointer;
    transition: var(--transition);

    &:hover {
        color: color-mix(in oklch, var(--color-surface-1) 15%, var(--color-text-stark))
    }

    &:active {
        color: var(--color-text-stark)
    }
}

/* Appearance modifiers */

.frame .ghost {
    background-color: transparent
}

.frame .hug {
    min-width: 0;
    width: fit-content;
    height: fit-content;
    padding: 0
}

.frame .transparent {
    background-color: transparent !important
}

.frame .outlined {
    border-width: 1.5px;
    border-style: solid;
    border-color: color-mix(in oklch, var(--color-form-surface) 80%, var(--color-form-inverse))
}

.frame .large {
    --spacing-form-height: 2.5rem;
    --spacing-form: 0.78rem;
    font-size: 125%;
}

.frame .small {
    --spacing-form-height: 1.5rem;
    --spacing-form: 0.49rem;
    font-size: 75%;
}

/* Aria */

.frame [aria-controls] {
    cursor: pointer
}

.frame [aria-disabled=true],
.frame [disabled] {
    cursor: not-allowed
}

.frame[ aria-hidden=false][hidden] {
    display: initial
}

.frame [aria-hidden=false][hidden]:not(:focus) {
    clip: rect(0, 0, 0, 0);
    position: absolute
}

/* Aside (nested nav used for vertical navigation menus) */

.frame .aside {
    width: 100%;
    max-width: 100%;

    & nav {
        display: flex;
        flex-direction: column;
        align-items: start;

        & a {
            font-weight: inherit;
            font-size: small;
            text-decoration: none;
            color: inherit;

            /* Modifier for tab appearance */
            &.tab {
                width: 100%;
                padding: var(--spacing-2xs) 0 var(--spacing-xs) var(--spacing-sm);
                border-left-width: 1px;
                border-left-style: solid;
                border-left-color: var(--color-line);

                &:hover {
                    color: var(--color-text-stark);
                    border-left-color: var(--color-text-main)
                }

                &.active {
                    border-left-color: var(--color-accent)
                }
            }
        }

        &.active {
            color: var(--color-accent) !important;
            pointer-events: none
        }
    }
}

/* Avatar */

.frame .avatar {
    position: relative;
    display: flex;
    flex-flow: row-wrap;
    flex-shrink: 0;
    justify-content: center;
    align-items: center;
    width: var(--spacing-form-height);
    height: var(--spacing-form-height);
    font-weight: bold;
    text-align: center;
    text-transform: uppercase;
    background-color: var(--color-form-surface);
    border-radius: 50%;
    overflow: hidden;

    /* Profile pic */
    & img {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
        object-position: center;
    }
}

.frame button.avatar {
    &:hover {
        scale: 1.05;
    }

    &:active {
        scale: 0.98;
    }
}

/* Blockquotes */

.frame blockquote {
    display: block;
    width: 100%;
    max-width: 100%;
    margin: var(--spacing-md) 0;
    padding: 0 var(--spacing-md);
    border-right: none;
    border-left: .25rem solid color-mix(in oklch, var(--color-surface-1) 92%, var(--color-text));
    border-inline-start: 0.25rem solid color-mix(in oklch, var(--color-surface-1) 92%, var(--color-text));
    border-inline-end: none
}

/* Buttons */
.frame button,
[role=button],
[type=button],
[type=file]::file-selector-button,
[type=reset],
[type=submit] {
    display: inline-flex;
    justify-content: center;
    align-items: center;
    min-width: var(--spacing-form-height);

    /* Nested spans & icons */
    & span,
    & [icon],
    & [x-icon] {

        /* Apply spacing between multiple items */
        &:not(:nth-child(n+1):last-child) {
            margin-right: 0.375rem
        }
    }

    /* Remove padding around a solo icon */
    &:has(>svg:only-child) {
        padding: 0;
        font-size: 1rem
    }

    /* Center icons */
    & svg {
        margin-left: auto;
        margin-right: auto
    }
}

/* Checkboxes */

.frame input[type=checkbox]:not([role=switch]) {

    position: relative;
    min-width: calc(var(--spacing-form-height) * 0.6);
    width: calc(var(--spacing-form-height) * 0.6);
    height: calc(var(--spacing-form-height) * 0.6);
    padding: 5px;
    border-radius: 0.4rem;
    border: 1.5px solid color-mix(in oklch, var(--color-surface-1) 79%, var(--color-text));
    cursor: pointer;

    /* On */
    &:checked {
        background-color: var(--color-primary);
        border: 1.5px solid var(--color-primary);

        &:hover {
            background-color: color-mix(in oklch, var(--color-primary) 85%, var(--color-primary-inverse));
            border: 1.5px solid color-mix(in oklch, var(--color-primary) 85%, var(--color-primary-inverse))
        }

        &:active {
            background-color: color-mix(in oklch, var(--color-primary) 74%, var(--color-primary-inverse));
            border: 1.5px solid color-mix(in oklch, var(--color-primary) 74%, var(--color-primary-inverse))
        }
    }

    /* Icon */
    &::after {
        content: "";
        position: absolute;
        top: 50%;
        left: 50%;
        width: 75%;
        height: 75%;
        background-color: var(--color-primary-inverse);
        -webkit-mask-image: var(--icon-checkbox);
        mask-image: var(--icon-checkbox);
        -webkit-mask-repeat: no-repeat;
        mask-repeat: no-repeat;
        -webkit-mask-size: 100% 100%;
        mask-size: 100% 100%;
        transform-origin: center;
        transition: var(--transition);

        /* Icon off */
        opacity: 0;
        -webkit-transform: translateX(-50%) translateY(-50%) scale(0);
        transform: translateX(-50%) translateY(-50%) scale(0)
    }

    /* Icon on */
    &:checked::after {
        opacity: 1;
        -webkit-transform: translateX(-50%) translateY(-50%) scale(1);
        transform: translateX(-50%) translateY(-50%) scale(1)
    }
}

/* Carousel (used for Indux's x-carousel) */

frame [x-carousel] {
    position: relative;
    display: flex;
    flex-direction: column;
    width: 100%;
    overflow: hidden;

    /* Slides container */
    .carousel-slides {
        display: flex;
        transition: transform 300ms ease-in-out;
        width: 100%;
        aspect-ratio: 16 / 9
    }

    /* Previous & next buttons */
    & button[\@click="prev()"],
    & button[\@click="next()"] {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        background-color: oklch(100% 0 0 / 0.15);

        &:hover {
            background-color: oklch(100% 0 0 / 0.3)
        }
    }

    & button[\@click="prev()"] {
        left: var(--spacing-md)
    }

    & button[\@click="next()"] {
        left: auto;
        right: var(--spacing-md)
    }

    /* Dots container */
    .carousel-dots {
        position: absolute;
        bottom: var(--spacing-md);
        left: 50%;
        transform: translateX(-50%);
        display: flex;
        gap: var(--spacing-sm);
        max-width: 100%;
        padding: 0 var(--spacing-md);
        overflow-x: auto;
        -webkit-overflow-scrolling: touch;
        scrollbar-width: none;

        &::-webkit-scrollbar {
            display: none
        }

        /* Dot button */
        & span {
            flex-shrink: 0;
            width: 0.625rem;
            height: 0.625rem;
            border-radius: 50%;
            background-color: oklch(100% 0 0 / 0.15);
            cursor: pointer;
            transition: background-color 300ms ease-in-out;

            &:hover {
                background-color: oklch(100% 0 0 / 0.3)
            }

            &.active {
                background-color: white
            }
        }
    }
}

/* Code */

.frame code {
    display: inline-block;
    width: fit-content;
    padding: 0 0.3rem;
    font-size: 75%;
    word-wrap: break-word;
    color: var(--color-text-neutral);
    background-color: var(--color-form-surface);
    border-radius: 0.375rem
}

/* Color modifiers */

.frame :where(a, abbr, address, code, del, h1, h2, h3, h4, h5, h6, ins, label, legend, p, pre, span, small, cite, q) {
    &.primary {
        color: var(--color-primary-text)
    }

    &.accent {
        color: var(--color-accent-text)
    }

    &.danger {
        color: var(--color-danger-text)
    }

    &.contrast {
        color: var(--color-page)
    }
}

.frame :where(a) {
    &.primary:where(:hover, :focus, :focus-visible) {
        color: color-mix(in oklch, var(--color-primary-text) 85%, var(--color-primary-inverse))
    }

    &.primary:active {
        color: color-mix(in oklch, var(--color-primary-text) 74%, var(--color-primary-inverse))
    }

    &.accent:where(:hover, :focus, :focus-visible) {
        color: color-mix(in oklch, var(--color-accent-text) 85%, var(--color-accent-inverse))
    }

    &.accent:active {
        color: color-mix(in oklch, var(--color-accent-text) 74%, var(--color-accent-inverse))
    }

    &.danger:where(:hover, :focus, :focus-visible) {
        color: color-mix(in oklch, var(--color-danger-text) 85%, var(--color-danger-inverse))
    }

    &.danger:active {
        color: color-mix(in oklch, var(--color-danger-text) 74%, var(--color-danger-inverse))
    }

    &.contrast:where(:hover, :focus, :focus-visible, :active) {
        color: var(--color-page)
    }
}

.frame :where(.prose aside, button, [role=button], mark, input, select, textarea) {

    &.primary,
    &.primary:focus-visible {
        color: var(--color-primary-inverse);
        background-color: var(--color-primary);
        border-color: color-mix(in oklch, var(--color-primary) 74%, var(--color-primary-inverse));
        outline-color: color-mix(in oklch, var(--color-primary) 74%, var(--color-primary-inverse))
    }

    &.accent,
    &.accent:focus-visible {
        color: var(--color-accent-inverse);
        background-color: var(--color-accent);
        border-color: color-mix(in oklch, var(--color-accent) 74%, var(--color-accent-inverse));
        outline-color: color-mix(in oklch, var(--color-accent) 74%, var(--color-accent-inverse))
    }

    &.danger,
    &.danger:focus-visible {
        color: var(--color-danger-inverse);
        background-color: var(--color-danger);
        border-color: color-mix(in oklch, var(--color-danger) 74%, var(--color-danger-inverse));
        outline-color: color-mix(in oklch, var(--color-danger) 74%, var(--color-danger-inverse))
    }

    &.contrast,
    &.contrast:focus-visible {
        color: var(--color-page);
        background-color: var(--color-text-stark);
        border-color: color-mix(in oklch, var(--color-surface-1) 8%, var(--color-text-stark));
        outline-color: color-mix(in oklch, var(--color-surface-1) 8%, var(--color-text-stark))
    }
}

.frame :where(button, [role=button], input, select, textarea) {
    &.primary:hover {
        color: color-mix(in oklch, var(--color-primary-inverse) 96%, var(--color-primary));
        background-color: color-mix(in oklch, var(--color-primary) 85%, var(--color-primary-inverse))
    }

    &.primary:active {
        color: var(--color-primary-inverse);
        background-color: color-mix(in oklch, var(--color-primary) 74%, var(--color-primary-inverse))
    }

    &.accent:hover {
        color: color-mix(in oklch, var(--color-accent-inverse) 96%, var(--color-accent));
        background-color: color-mix(in oklch, var(--color-accent) 85%, var(--color-accent-inverse))
    }

    &.accent:active {
        color: var(--color-primary-inverse);
        background-color: color-mix(in oklch, var(--color-accent) 74%, var(--color-accent-inverse))
    }

    &.danger:hover {
        color: color-mix(in oklch, var(--color-danger-inverse) 96%, var(--color-danger));
        background-color: color-mix(in oklch, var(--color-danger) 85%, var(--color-danger-inverse))
    }

    &.danger:active {
        color: var(--color-danger-inverse);
        background-color: color-mix(in oklch, var(--color-danger) 74%, var(--color-danger-inverse))
    }

    &.contrast:hover {
        color: var(--color-page);
        background-color: color-mix(in oklch, var(--color-page) 25%, var(--color-text-stark))
    }

    &.contrast:active {
        color: var(--color-page);
        background-color: color-mix(in oklch, var(--color-surface-1) 40%, var(--color-text))
    }
}

.frame :where(input, textarea) {
    &.primary::placeholder {
        color: color-mix(in srgb, var(--color-primary-inverse) 70%, transparent)
    }

    &.primary:where(:focus, :focus-visible) {
        background-color: color-mix(in oklch, var(--color-primary) 95%, var(--color-primary-inverse))
    }

    &.accent::placeholder {
        color: color-mix(in srgb, var(--color-accent-inverse) 70%, transparent)
    }

    &.accent:where(:focus, :focus-visible) {
        background-color: color-mix(in oklch, var(--color-accent) 74%, var(--color-accent-inverse))
    }

    &.danger::placeholder {
        color: color-mix(in srgb, var(--color-danger-inverse) 70%, transparent)
    }

    &.danger:where(:focus, :focus-visible) {
        background-color: color-mix(in oklch, var(--color-danger) 74%, var(--color-danger-inverse))
    }

    &.contrast::placeholder {
        color: color-mix(in srgb, var(--color-page) 70%, transparent)
    }

    &.contrast:where(:focus, :focus-visible) {
        background-color: color-mix(in oklch, var(--color-surface-1) 8%, var(--color-text))
    }
}

/* Cookies */
.frame #cookies {
    position: fixed;
    bottom: var(--spacing-md);
    left: auto;
    right: var(--spacing-md);
    display: flex;
    flex-direction: column;
    gap: var(--spacing-md);
    width: 350px;
    padding: var(--spacing-md);
    font-size: 0.875rem;
    background: var(--color-page);
    border-radius: var(--radius);
    box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);
    z-index: 100;

    .cookie-type {
        display: flex;
        justify-content: space-between;
        padding: calc(var(--spacing-md) * 0.625);
        background-color: var(--color-surface-1);
        border-radius: var(--radius);
    }
}

.frame.dark #cookies {
    background: var(--color-surface-1);

    .cookie-type {
        background-color: color-mix(in srgb, var(--color-surface-2) 50%, transparent);
    }
}

/* Details (used for accordions) */

.frame :where(details):not(.raw) {
    transition: var(--transition);

    /* Rotate icon */
    &[open]>summary:before {
        transform: rotate(90deg);
    }

    & [open] summary {
        margin-bottom: var(--spacing-md);
    }

    /* Content padding */
    &> :not(summary) {
        padding: var(--spacing-form) 0;
    }

    :where(summary) {
        position: relative;
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-weight: bold;
        color: var(--color-text-main);
        user-select: none;
        cursor: pointer;
        transition: margin 150s ease-out;

        /* Hide default caret */
        &::marker,
        &::-webkit-details-marker {
            display: none;
            content: "";
        }

        &:hover {
            color: color-mix(in oklch, var(--color-surface-1) 40%, var(--color-text-stark))
        }

        &:active {
            color: color-mix(in oklch, var(--color-surface-1) 50%, var(--color-text-stark))
        }

        /* Add custom icon */
        &:before {
            content: "";
            order: 1;
            width: 1rem;
            height: 1rem;
            background-color: color-mix(in oklch, var(--color-form-surface) 50%, var(--color-form-inverse));
            -webkit-mask-image: var(--icon-accordion);
            mask-image: var(--icon-accordion);
            -webkit-mask-repeat: no-repeat;
            mask-repeat: no-repeat;
            -webkit-mask-size: 100% 100%;
            mask-size: 100% 100%;
            transform: rotate(0);
            transition: 0.25s transform ease;
        }
    }
}

/* Dialogs (used for popover modals) */

.frame :where(dialog) {
    position: fixed;
    left: 0;
    right: 0;
    width: 500px;
    flex-direction: column;
    max-width: 100%;
    min-height: 200px;
    max-height: 90vh;
    margin: auto;
    color: var(--color-text-main);
    background-color: var(--color-popover-surface);
    border: 0 none;
    border-radius: calc(var(--radius) * 2);
    box-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);

    &::backdrop {
        background-color: rgba(0, 0, 0, 0.2);
    }

    /* Set layout for common children */
    & :where(header, main, footer) {
        display: flex;
        padding: var(--spacing-md);
    }

    /* Push header content apart */
    & :where(header) {
        justify-content: space-between;
        align-items: center;
        gap: var(--spacing-md)
    }

    /* Push footer to bottom */
    & :where(main) {
        flex-grow: 1
    }

    /* Push footer content to end */
    & :where(footer) {
        justify-content: end;
        align-items: center;
        gap: var(--spacing-form);
        margin-top: auto
    }

    /* Turn modal into alert prompt on mobile */
    @media screen and (max-width: 768px) {
        width: calc(100vw - var(--spacing-md) - var(--spacing-md)) !important;
        max-height: calc(100vh - var(--spacing-md) - var(--spacing-md)) !important;
        margin: auto !important
    }
}

.frame .dark :where(dialog)::backdrop {
    background-color: rgba(0, 0, 0, 0.35)
}

/* Direction */

.frame [dir=rtl] {
    direction: rtl
}

/* Disabled */

.frame [disabled],
:disabled {
    opacity: .5;
    pointer-events: none
}

/* Dividers */

.frame :where(.divider) {
    display: flex;
    flex-flow: row nowrap;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 1px;
    margin: var(--spacing-form) 0;
    white-space: nowrap;
    font-size: 0.875rem;
    color: var(--color-text-neutral);

    /* Lines before and after content */
    &:before,
    &:after {
        content: "";
        display: block;
        flex-grow: 1;
        width: auto;
        height: 1px;
        background-color: var(--color-line)
    }

    /* Space between lines and content */
    &:not(:empty) {
        gap: var(--spacing-form)
    }
}

/* Start modifier */
.frame :where(.divider.start) {
    &:before {
        display: none
    }
}

/* End modifier */
.frame :where(.divider.end) {
    &:after {
        display: none
    }
}

/* Vertical modifier */
.frame .divider.vertical {
    flex-flow: column nowrap;
    width: fit-content;
    min-width: 1px;
    height: auto;
    min-height: 100%;
    margin: 0 var(--spacing-form);

    &:before,
    &:after {
        content: "";
        width: 1px;
        height: auto
    }

    /* Icon */
    & [icon],
    & [x-icon] {
        flex-shrink: 0;
        min-height: 0.875rem;
        font-size: 0.875rem
    }
}

/* Fieldset */

.frame :where(fieldset) {
    width: 100%;
    border: 0 none;
}

/* Figures */

.frame :where(figure) {
    display: block;
    padding: 0
}

.frame:where(figure) figcaption {
    margin: var(--spacing-sm) auto;
    text-align: center
}

/* File upload */
/* Place input type="file" in HTML and use its label as the trigger. */

.frame input[type="file"] {
    display: none;
}

/* Focus state & no focus modifier */

.frame :where(:focus-visible) {
    outline: 2px solid color-mix(in oklch, var(--color-form-surface) 90%, var(--color-form-inverse));
    outline-offset: 0;
}

.frame.no-focus:focus-visible {
    outline: 0 none
}

/* Forms */

.frame :where(form) {
    display: flex;
    flex-flow: column nowrap;
    gap: var(--spacing-md)
}

/* Form elements with common properties */

.frame :where(button:not(.link), [role=button], input, select, textarea) {
    max-width: 100%;
    background-color: var(--color-form-surface);
    border-width: 0;
    border-style: solid;
    border-color: transparent;
    border-radius: var(--radius);
    outline-color: var(--color-line);
    transition: var(--transition);
    -webkit-appearance: none;
    -moz-appearance: none;
    appearance: none;

    &:hover {
        background-color: var(--color-form-surface-hover)
    }

    &:active {
        background-color: var(--color-form-surface-hover)
    }
}

.frame :where(input, button:not(.link), [role=button], select) {
    height: var(--spacing-form-height)
}

.frame :where(button:not(.link), [role=button], select) {
    width: fit-content;
    margin: 0;
    padding: 0 var(--spacing-form);
    white-space: nowrap;
    text-overflow: ellipsis;

    &:focus-visible {
        background-color: var(--color-form-surface)
    }
}

.frame :where(input, textarea) {
    width: 100%;
    cursor: text;

    &:focus {
        background-color: var(--color-form-surface)
    }

    &::placeholder {
        color: color-mix(in oklch, var(--color-text-main) 50%, transparent)
    }

    &::selection {
        background-color: color-mix(in oklch, var(--color-form-surface) 80%, var(--color-form-inverse))
    }
}

/* Group (for contiguous horizontal row of buttons and inputs) */

.frame :where([role=group]) {
    display: flex;
    flex-flow: row nowrap;
    align-items: center;
    gap: 0;
    width: fit-content;
    max-width: 100%;

    &>*:first-child {
        border-top-right-radius: 0;
        border-bottom-right-radius: 0
    }

    &>*:not(:first-child):not(:last-child) {
        border-radius: 0
    }

    &>*:last-child {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0
    }
}

/* Heading text */

.frame :where(h1),
.frame :where(h2),
.frame :where(h3),
.frame :where(h4),
.frame :where(h5),
.frame :where(h6) {
    font-weight: bolder;
    word-wrap: break-word
}

/* Horizontal rules */

.frame :where(hr) {
    background-color: var(--color-line);
}

/* Icons */
.frame :where([icon], [x-icon]) {
    display: inline-flex;
}

/* Inputs */

.frame :where(input) {
    padding: 0 0 0 var(--spacing-form);

    &[type="search"] {
        padding-left: var(--spacing-form-height);
        background-image: var(--icon-search);
        background-repeat: no-repeat;
        background-position: left calc(var(--spacing-form-height) * 0.25) center;
    }
}

/* Inserted text */

.frame :where(ins) {
    text-decoration: none
}

/* Keyboard text */

.frame :where(kbd) {
    display: inline-block;
    vertical-align: baseline;
    width: fit-content;
    min-width: 1.4rem;
    padding: 0.3rem;
    font-family: inherit;
    font-size: 0.875rem;
    line-height: 1;
    text-align: center;
    color: var(--color-text-main);
    background-color: var(--color-form-surface);
    border-radius: 0.375rem;

    &:not(:last-of-type) {
        margin-right: 1px
    }
}

/* Labels */

.frame :where(label) {
    width: -moz-fit-content;
    width: fit-content;
    user-select: none
}

/* Layout modifiers */

.frame .content {
    width: var(--spacing-content-width);
    max-width: 100%;
    margin-left: auto;
    margin-right: auto
}

.frame .row,
.frame .row-wrap,
.frame .col,
.frame .col-wrap {
    display: flex;
}

.frame .row {
    flex-flow: row nowrap
}

.frame .row-wrap {
    flex-flow: row wrap
}

.frame .col {
    flex-flow: column nowrap
}

.frame .col-wrap {
    flex-flow: column wrap
}

.frame .center {
    justify-content: center;
    align-items: center
}

/* Legends */

.frame :where(legend) {
    display: block;
    max-width: 100%;
    white-space: normal
}

/* Lists & list items */

.frame :where(ol):not(nav ol):not(menu ol),
.frame :where(ul):not(nav ul):not(menu ul) {
    padding-left: 1ch;
    list-style-position: inside;

    /* Offset items so markers align to the inside frame  */
    & li {
        padding-left: 1.2ch;
        text-indent: -2ch;

        /* Space out items */
        & :where(:not(:last-child)) {
            margin-bottom: var(--spacing-md)
        }

        /* Allow icons to replace markers */
        &:has([icon], [x-icon]) {
            list-style: none;

            & [icon],
            & [x-icon] {
                position: relative;
                left: -3px;
                margin-right: 6px
            }
        }

        /* Keep nested elements inline with marker */
        & *:not(:where(ul, ol)) {
            display: inline
        }

        /* Arrange nested preformatted code blocks */
        & pre {
            display: block;
            margin-top: 1rem;
            margin-bottom: 1rem;
        }

        /* Arrange checklist items */
        &:has(input[type="checkbox"]) {
            padding-left: 0;
            text-indent: 0;
            list-style: none;
        }

        & input[type="checkbox"] {
            top: 0.3rem;
            margin-bottom: 0;
            margin-right: 1rem;
        }
    }

    /* Accommodate nested lists */
    & ul,
    & ol {
        margin-top: calc(var(--spacing-md) * 0.5);
        padding-left: var(--spacing-indent);
    }

    & li:has(+ ul, > ul, + ol, > ol) {
        margin-bottom: 0;
    }

    & ul,
    & ol,
    & li:has(> ul, > ol) {
        & li {
            display: list-item;
            text-indent: -1ch;
            margin-bottom: calc(var(--spacing-md) * 0.5);

            &:last-of-type {
                margin-bottom: var(--spacing-md);
            }
        }
    }
}

/* Mark (used for badges) */

.frame :where(mark) {
    display: inline-flex;
    justify-content: center;
    align-items: center;
    gap: 0.25rem;
    width: fit-content;
    height: fit-content;
    padding: var(--spacing-2xs) var(--spacing-sm);
    font-weight: 500;
    font-size: 0.75rem;
    color: var(--color-text-main);
    background-color: var(--color-form-surface);
    border-radius: 100px;

    /* Solo icons */
    &:has([icon]:only-child),
    &:has([x-icon]:only-child) {
        aspect-ratio: 1/1
    }
}

/* Menu (used for popover dropdowns) */

.frame menu {
    position: absolute;
    position-try-fallbacks: flip-inline, flip-block, flip-start;
    position-area: bottom;
    inset: auto;
    flex-flow: column nowrap;
    gap: 0;
    width: fit-content;
    min-width: 160px;
    height: fit-content;
    max-height: 90vh;
    margin: 0;
    padding: 0.25rem;
    z-index: 50;
    list-style: none;
    background: var(--color-popover-surface);
    border: 0 none;
    border-radius: 8px;
    box-shadow: rgba(15, 15, 15, 0.05) 0px 0px 0px 1px, rgba(15, 15, 15, 0.1) 0px 3px 6px, rgba(15, 15, 15, 0.2) 0px 9px 24px;
    transform-origin: top center;

    /* Options */
    & :where(li, a, button) {
        display: inline-flex;
        justify-content: start;
        align-items: center;
        width: 100%;
        max-width: 100%;
        min-height: 2rem;
        padding-left: 0.5rem;
        padding-right: 0.5rem;
        font-weight: normal;
        color: var(--color-text-main);
        text-align: start;
        text-decoration: none;
        text-overflow: ellipsis;
        overflow: hidden;
        white-space: nowrap;
        background-color: transparent;
        border-radius: 6px;
        cursor: pointer;
        user-select: none;
        transition: var(--transition);

        &:hover {
            color: var(--color-text-stark);
            text-decoration: inherit;
            background-color: var(--color-form-surface);
        }

        &:active {
            color: var(--color-text-stark);
            background-color: var(--color-form-surface);
        }

        /* Leading icons */
        & [icon]:first-child:not(:only-child),
        & [x-icon]:first-child:not(:only-child) {
            margin-right: 0.375rem
        }
    }

    /* Titles */
    & small {
        padding: 0.25rem 0.5rem;
        color: var(--color-text-neutral);
    }

    /* Horizontal rules (offset to ignore menu padding) */
    & hr {
        width: calc(100% + 0.25rem * 2);
        margin-left: calc(0.25rem * -1);
        margin-top: 0.25rem;
        margin-bottom: 0.25rem;
        background-color: var(--color-line);
    }
}

/* Navigation layout presets */

.frame :where(nav:has(ul)) {
    display: flex;
    flex-flow: row nowrap;
    justify-content: space-between;
    align-items: center;
    width: var(--spacing-content-width);
    max-width: 100%;
    margin-left: auto;
    margin-right: auto;

    & ul {
        display: flex;
        flex-flow: row nowrap;
        justify-content: space-between;
        align-items: center;
        gap: calc(var(--spacing-md) * 0.5);
        margin: 0;
        padding: 0;
        list-style: none;

        & li {
            display: flex;
            align-items: center;
            gap: 0.25rem;
            transition: var(--transition)
        }
    }
}

/* Overlay modifiers */

.frame .overlay-dark,
.frame .overlay-light {
    position: relative;

    &::after {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        z-index: 0;
        width: 100%;
        height: 100%
    }

    >* {
        position: relative;
        z-index: 1
    }
}

.frame .overlay-dark {
    color: white !important;

    &::after {
        background: var(--overlay-dark)
    }
}

.frame .overlay-light {
    color: black !important;

    &::after {
        background: var(--color-overlay-light)
    }
}

/* Popovers (for dropdowns, modals, tooltips) */
.frame [popover] {
    transition: opacity .15s ease-in, scale .15s ease-in, display .15s ease-in;
    transition-behavior: allow-discrete;

    /* Opening state */
    @starting-style {
        scale: .9;
        opacity: 0
    }

    /* Closing state */
    &:not(:popover-open) {
        scale: 1;
        opacity: 0;
        transition-duration: .15s;
        transition-timing-function: ease-out;
    }
}

/* Preformatted code blocks */

.frame :where(pre) {
    display: block;
    -ms-overflow-style: scrollbar;
    overflow-x: auto;
    width: 100%;
    padding: var(--spacing-md);
    font-size: 0.8125rem;
    line-height: 1.2;
    text-indent: 0;
    color: var(--color-text-stark);
    background-color: var(--color-surface-1);
    border-radius: var(--radius)
}

.frame :where(pre) code {
    display: block;
    width: 100%;
    padding: 0;
    font-size: inherit;
    font-family: inherit;
    background-color: transparent
}

/* Prose modifier for spacing out long-form text */

.frame :where(.prose) {
    width: 65ch;
    max-width: 100%;

    /* Asides inside a prose element are used as callouts */
    & aside {
        margin-top: calc(1rem * 1.4);
        padding: 1rem;
        border-radius: var(--radius);
        background-color: var(--color-surface-1);

        & * {
            margin: 0 !important
        }
    }

    & a:not(:where(h1, h2, h3, h4, h5, h6, p, small, figcaption, label, li, blockquote, pre code, code, kbd, span, mark, [role=button]) a) {
        margin-top: calc(1rem * 1.4);
    }

    & blockquote {
        margin-top: calc(1rem * 2);

        & * {
            margin: 0
        }
    }

    & figcaption {
        margin-top: 1rem
    }

    & figure {
        margin-top: calc(1rem * 1.4);

        & img {
            margin: 0
        }
    }

    & h2 {
        margin-top: 1rem;
        margin-bottom: calc(1rem * 0.6667)
    }

    & h3 {
        margin-top: calc(1rem * 2.4)
    }

    & h4 {
        margin-top: calc(1rem * 3)
    }

    & h5 {
        margin-top: 1rem;
        margin-bottom: 1rem
    }

    h6 {
        margin-top: calc(1rem * 2);
        margin-bottom: 1rem
    }

    & hr {
        margin-top: calc(1rem * 3);
        margin-bottom: calc(1rem * 3)
    }

    & img,
    p {
        margin-top: calc(1rem * 1.4)
    }

    & ol,
    ul,
    small,
    pre {
        margin-top: 1rem
    }

    & li>* {
        margin-top: 0;
        margin-bottom: 0
    }

    & table {
        margin-top: calc(1rem * 2);
        margin-bottom: calc(1rem * 2)
    }
}

/* Radio buttons */

.frame :where input[type=radio] {
    position: relative;
    min-width: calc(var(--spacing-form-height) * 0.6);
    width: calc(var(--spacing-form-height) * 0.6);
    height: calc(var(--spacing-form-height) * 0.6);
    padding: 5px;
    border-radius: 50%;
    border: 1.5px solid color-mix(in oklch, var(--color-form-surface) 79%, var(--color-form-inverse));
    cursor: pointer;

    /* On */
    &:checked {
        background-color: var(--color-form-surface);
        border: 1.5px solid var(--color-text-stark)
    }

    /* Notch */
    &::after {
        content: "";
        position: absolute;
        top: 50%;
        left: 50%;
        width: 75%;
        height: 75%;
        background-color: var(--color-form-inverse);
        border-radius: 50%;
        transform-origin: center;
        transition: var(--transition);

        /* Notch off */
        opacity: 0;
        -webkit-transform: translateX(-50%) translateY(-50%) scale(0);
        transform: translateX(-50%) translateY(-50%) scale(0)
    }

    /* Notch on */
    &:checked::after {
        opacity: 1;
        -webkit-transform: translateX(-50%) translateY(-50%) scale(1);
        transform: translateX(-50%) translateY(-50%) scale(1)
    }
}

.frame .dark input[type=radio] {
    &:checked {
        border: 1.5px solid var(--color-primary);
    }

    &::after {
        background-color: var(--color-primary);
    }
}

/* Selection of text */

.frame ::selection {
    background-color: color-mix(in oklch, var(--color-surface-1) 75%, var(--color-text-main))
}

/* Scrollbar removal modifier */

.frame .no-scrollbar {
    -ms-overflow-style: none;
    scrollbarWidth: none;

    &::-webkit-scrollbar {
        display: none
    }
}

/* Select menus */

.frame :where(select) {
    padding-left: var(--spacing-form);
    padding-right: calc(var(--spacing-form-height) * 0.75);

    /* Caret icon */
    background-image: var(--icon-select);
    background-repeat: no-repeat;
    background-position: right calc(var(--spacing-form-height) * 0.25) center;
    background-size: calc(var(--spacing-form-height) * 0.35);

    &::-ms-expand {
        border: 0;
        background-color: transparent
    }
}

/* Spans */

.frame :where(span) {
    color: inherit
}

/* Switches */

.frame :where(input[role=switch]) {
    position: relative;
    min-width: calc(var(--spacing-form-height) * 0.65 * 2);
    width: calc(var(--spacing-form-height) * 0.65 * 2);
    height: calc(var(--spacing-form-height) * 0.65);
    padding: 0;
    box-sizing: content-box;
    border-radius: calc(var(--spacing-form-height) * 0.65);
    cursor: pointer;

    /* Marker */
    &::before {
        content: "";
        position: absolute;
        top: 0.125rem;
        left: 0.125rem;
        width: calc(var(--spacing-form-height) * 0.65 - 0.125rem * 2);
        height: calc(var(--spacing-form-height) * 0.65 - 0.125rem * 2);
        border-radius: 50%;
        background-color: color-mix(in oklch, var(--color-form-surface) 60%, var(--color-form-inverse));
        box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
        transition: var(--transition)
    }

    /* On */
    &:checked {
        background-color: var(--color-primary);

        /* Marker */
        &::before {
            left: calc(100% - (var(--spacing-form-height) * 0.65) + 0.125rem);
            background-color: white
        }

        &:hover {
            background-color: color-mix(in oklch, var(--color-primary) 85%, var(--color-primary-inverse))
        }

        &:active {
            background-color: color-mix(in oklch, var(--color-primary) 74%, var(--color-primary-inverse))
        }
    }
}

/* SVGs */

.frame :where(svg):not([fill]) {
    fill: currentColor
}

.frame :where(svg):not(:root) {
    overflow: hidden
}

/* Tables */

.frame :where(table) {
    width: 100%;
    max-width: 100%;
    overflow: hidden;
    border-spacing: 0;
    border-radius: var(--radius);

    /* Striped modifier */
    &.striped {
        & tr:nth-child(even) {
            background-color: var(--color-surface-1)
        }

        & tr:nth-child(odd) {
            background-color: transparent
        }

        & tr {
            border-bottom: 0 none
        }
    }
}

.frame :where(thead) {
    background-color: var(--color-surface-1);
    border-bottom: 1px solid var(--color-line)
}

.frame :where(tr) {
    border-bottom: 1px solid var(--color-line)
}

.frame :where(td),
.frame :where(th) {
    padding: calc(var(--spacing-md) * 0.625) var(--spacing-md);
    font-size: 0.875rem;
    text-align: left;
    text-align: start;
    overflow: hidden;

    /* Make elements within cell inline */
    &>*:not(template) {
        display: inline-block;

        /* Add space between them */
        &:not(:last-child) {
            margin-right: 4px
        }
    }
}

.frame :where(tfoot) td,
.frame :where(tfoot) th {
    border-bottom: 0
}

/* Textareas */

.frame :where(textarea) {
    display: block;
    padding: var(--spacing-form) calc(var(--spacing-form) * 1.3)
}

/* Tooltips */

.frame :where(.tooltip[popover]) {
    position: absolute;
    position-try-fallbacks: flip-inline, flip-block, flip-start;
    position-area: bottom;
    inset: auto;
    display: block;
    width: fit-content;
    max-width: 200px;
    margin: var(--spacing-sm);
    padding: var(--spacing-2xs) var(--spacing-sm);
    font-size: 0.875rem;
    color: var(--color-page);
    background-color: var(--color-text-stark);
    border: 0 none;
    border-radius: var(--radius);
    box-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1);
    white-space: pre-wrap;

    &:hover {
        transition-delay: 1s
    }
}

/* Toasts (used for Indux's x-toast) */

.frame :where(.toast-container) {
    position: fixed;
    bottom: var(--spacing-viewport-padding);
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    flex-direction: column-reverse;
    align-items: center;
    gap: var(--spacing-sm);
    z-index: 100;
}

.frame :where(.toast),
.frame :where(.toast-success),
.frame :where(.toast-error) {
    display: flex;
    max-width: 90vw;
    background-color: var(--color-popover-surface);
    border-radius: var(--radius-xl);
    box-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);
    overflow: hidden;
    /* Initial state */
    opacity: 0;
    transform: translateY(1rem);
    /* Add height, margin, and padding to transitions */
    transition:
        opacity 0.2s ease-out,
        transform 0.2s ease-out,
        height 0.2s ease-out,
        margin 0.2s ease-out,
        padding 0.2s ease-out;
}

.frame :where(.toast-success) {
    color: var(--color-accent-inverse);
    background-color: var(--color-accent)
}

.frame :where(.toast-error) {
    color: var(--color-danger-inverse);
    background-color: var(--color-danger)
}

.frame :where(.toast-icon) {
    display: flex;
    justify-content: center;
    align-items: center;
    padding-left: 0.625rem;
    color: inherit
}

.frame :where(.toast-content) {
    padding: 0.375rem 0.75rem;
    color: inherit
}

.frame :where(.toast-dismiss-button) {
    border-radius: 0
}

.frame :where(.toast-entry) {
    opacity: 1;
    transform: translateY(0);
}

.frame :where(.toast-exit) {
    opacity: 0;
    transform: translateY(1rem)
}

/* Trailing text & icon modifier */

.frame :where(.trailing) {
    display: inline-block;
    margin-left: auto;
    color: var(--color-text-neutral)
}

/* @ rule - font smoothing for iOS and Mac */

@media (-webkit-min-device-pixel-ratio: 2) {
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale
}

/* @ rule - reduced motion */

@media (prefers-reduced-motion:reduce) {

    :not([aria-busy=true]),
    :not([aria-busy=true])::after,
    :not([aria-busy=true])::before {
        background-attachment: initial !important;
        animation-duration: 1ms !important;
        animation-delay: -1ms !important;
        animation-iteration-count: 1 !important;
        scroll-behavior: auto !important;
        transition-delay: 0s !important;
        transition-duration: 0s !important
    }
}

/* @ rule - reverse animation direction for rtl mode */

@media (prefers-reduced-motion:no-preference) {
    [dir=rtl] progress:indeterminate {
        animation-direction: reverse
    }
}